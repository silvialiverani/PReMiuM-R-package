
R version 4.2.3 (2023-03-15) -- "Shortstop Beagle"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "PReMiuM"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('PReMiuM')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PReMiuM-package")
> ### * PReMiuM-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PReMiuM-package
> ### Title: Dirichlet Process Bayesian Clustering
> ### Aliases: PReMiuMpackage PReMiuM
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # example for Poisson outcome and Discrete covariates
> ##D inputs <- generateSampleDataFile(clusSummaryPoissonDiscrete())
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, 
> ##D     xModel=inputs$xModel, nSweeps=10, nClusInit=20,
> ##D     nBurn=20, data=inputs$inputData, output="output", 
> ##D     covNames = inputs$covNames, outcomeT = inputs$outcomeT,
> ##D     fixedEffectsNames = inputs$fixedEffectNames)
> ##D 
> ##D dissimObj<-calcDissimilarityMatrix(runInfoObj)
> ##D clusObj<-calcOptimalClustering(dissimObj)
> ##D riskProfileObj<-calcAvgRiskAndProfile(clusObj)
> ##D clusterOrderObj<-plotRiskProfile(riskProfileObj,"summary.png")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("calcAvgRiskAndProfile")
> ### * calcAvgRiskAndProfile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcAvgRiskAndProfile
> ### Title: Calculation of the average risks and profiles
> ### Aliases: calcAvgRiskAndProfile
> ### Keywords: postprocessing
> 
> ### ** Examples
> 
> ## Not run: 
> ##D generateDataList <- clusSummaryBernoulliDiscrete()
> ##D inputs <- generateSampleDataFile(generateDataList)
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, nSweeps=10, 
> ##D     nBurn=20, data=inputs$inputData, output="output", nClusInit=15,
> ##D     covNames=inputs$covNames)
> ##D 
> ##D dissimObj<-calcDissimilarityMatrix(runInfoObj)
> ##D clusObj<-calcOptimalClustering(dissimObj)
> ##D riskProfileObj<-calcAvgRiskAndProfile(clusObj)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("calcDissimilarityMatrix")
> ### * calcDissimilarityMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcDissimilarityMatrix
> ### Title: Calculates the dissimilarity matrix
> ### Aliases: calcDissimilarityMatrix
> ### Keywords: postprocessing
> 
> ### ** Examples
> 
> ## Not run: 
> ##D generateDataList <- clusSummaryBernoulliDiscrete()
> ##D inputs <- generateSampleDataFile(generateDataList)
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, 
> ##D     nSweeps=10, nBurn=20, data=inputs$inputData, output="output", 
> ##D     covNames=inputs$covNames,nClusInit=15)
> ##D 
> ##D dissimObj<-calcDissimilarityMatrix(runInfoObj)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("calcOptimalClustering")
> ### * calcOptimalClustering
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcOptimalClustering
> ### Title: Calculation of the optimal clustering
> ### Aliases: calcOptimalClustering
> ### Keywords: postprocessing
> 
> ### ** Examples
> 
> ## Not run: 
> ##D generateDataList <- clusSummaryBernoulliDiscrete()
> ##D inputs <- generateSampleDataFile(generateDataList)
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, 
> ##D     nSweeps=10, nBurn=20, data=inputs$inputData, output="output", 
> ##D     covNames=inputs$covNames, nClusInit=15)
> ##D 
> ##D dissimObj<-calcDissimilarityMatrix(runInfoObj)
> ##D clusObj<-calcOptimalClustering(dissimObj)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("calcPredictions")
> ### * calcPredictions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcPredictions
> ### Title: Calculates the predictions
> ### Aliases: calcPredictions
> ### Keywords: predictions
> 
> ### ** Examples
> 
> ## Not run: 
> ##D inputs <- generateSampleDataFile(clusSummaryBernoulliDiscrete())
> ##D      
> ##D # prediction profiles
> ##D preds<-data.frame(matrix(c(0, 0, 1, 0, 0,
> ##D 0, 0, 1, NA, 0),ncol=5,byrow=TRUE))
> ##D colnames(preds)<-names(inputs$inputData)[2:(inputs$nCovariates+1)]
> ##D      
> ##D # run profile regression
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, 
> ##D     nSweeps=100, nBurn=1000, data=inputs$inputData, output="output", 
> ##D     covNames=inputs$covNames,predict=preds)
> ##D      
> ##D # postprocessing
> ##D dissimObj <- calcDissimilarityMatrix(runInfoObj)
> ##D clusObj <- calcOptimalClustering(dissimObj)
> ##D riskProfileObj <- calcAvgRiskAndProfile(clusObj)
> ##D clusterOrderObj <- plotRiskProfile(riskProfileObj,"summary.png",
> ##D     whichCovariates=c(1,2))
> ##D output_predictions <- calcPredictions(riskProfileObj,fullSweepPredictions=TRUE)
> ##D 
> ##D # example where the fixed effects can be provided for prediction 
> ##D # but the observed response is missing 
> ##D # (there are 2 fixed effects in this example). 
> ##D # in this example we also use the Rao Blackwellised predictions
> ##D 
> ##D inputs <- generateSampleDataFile(clusSummaryPoissonNormal())
> ##D 
> ##D # prediction profiles
> ##D predsPoisson<- data.frame(matrix(c(7, 2.27, -0.66, 1.07, 9, 
> ##D      -0.01, -0.18, 0.91, 12, -0.09, -1.76, 1.04, 16, 1.55, 1.20, 0.89,
> ##D      10, -1.35, 0.79, 0.95),ncol=5,byrow=TRUE))
> ##D colnames(predsPoisson)<-names(inputs$inputData)[2:(inputs$nCovariates+1)]
> ##D 
> ##D # run profile regression
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, 
> ##D          xModel=inputs$xModel, nSweeps=100, 
> ##D          nBurn=100, data=inputs$inputData, output="output", 
> ##D          covNames = inputs$covNames, outcomeT="outcomeT",
> ##D          fixedEffectsNames = inputs$fixedEffectNames,predict=predsPoisson)
> ##D 
> ##D # postprocessing
> ##D dissimObj<-calcDissimilarityMatrix(runInfoObj)
> ##D clusObj<-calcOptimalClustering(dissimObj)
> ##D riskProfileObj<-calcAvgRiskAndProfile(clusObj)
> ##D output_predictions <- calcPredictions(riskProfileObj,fullSweepPredictions=TRUE)
> ##D 
> ##D 
> ##D # example where both the observed response and fixed effects are present 
> ##D #(there are no fixed effects in this example, but 
> ##D # these would just be added as columns between the first and last columns). 
> ##D 
> ##D inputs <- generateSampleDataFile(clusSummaryPoissonNormal())
> ##D 
> ##D # prediction profiles
> ##D predsPoisson<- data.frame(matrix(c(NA, 2.27, -0.66, 1.07, NA, 
> ##D      -0.01, -0.18, 0.91, NA, -0.09, -1.76, 1.04, NA, 1.55, 1.20, 0.89,
> ##D      NA, -1.35, 0.79, 0.95),ncol=5,byrow=TRUE))
> ##D colnames(predsPoisson)<-names(inputs$inputData)[2:(inputs$nCovariates+1)]
> ##D 
> ##D # run profile regression
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, 
> ##D          xModel=inputs$xModel, nSweeps=10, 
> ##D          nBurn=20, data=inputs$inputData, output="output", 
> ##D          covNames = inputs$covNames, outcomeT="outcomeT",
> ##D          fixedEffectsNames = inputs$fixedEffectNames,
> ##D          nClusInit=15, predict=predsPoisson)
> ##D 
> ##D # postprocessing
> ##D dissimObj<-calcDissimilarityMatrix(runInfoObj)
> ##D clusObj<-calcOptimalClustering(dissimObj)
> ##D riskProfileObj<-calcAvgRiskAndProfile(clusObj)
> ##D output_predictions <- calcPredictions(riskProfileObj,fullSweepPredictions=TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("clusSummaryBernoulliDiscrete")
> ### * clusSummaryBernoulliDiscrete
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusSummaryBernoulliDiscrete
> ### Title: Sample datasets for profile regression
> ### Aliases: clusSummaryBernoulliDiscrete clusSummaryBernoulliNormal
> ###   clusSummaryBernoulliDiscreteSmall clusSummaryBinomialNormal
> ###   clusSummaryCategoricalDiscrete clusSummaryNormalDiscrete
> ###   clusSummaryNormalNormal clusSummaryNormalNormalSpatial
> ###   clusSummaryPoissonDiscrete clusSummaryPoissonNormal
> ###   clusSummaryPoissonNormalSpatial clusSummaryVarSelectBernoulliDiscrete
> ###   clusSummaryBernoulliMixed clusSummaryWeibullDiscrete
> ###   clusSummaryQuantileNormal clusSummaryGammaNormal
> ### Keywords: simulation
> 
> ### ** Examples
> 
> names(clusSummaryBernoulliDiscrete())
 [1] "outcomeType"        "covariateType"      "nCovariates"       
 [4] "nCategories"        "nFixedEffects"      "fixedEffectsCoeffs"
 [7] "missingDataProb"    "nClusters"          "clusterSizes"      
[10] "includeCAR"         "TauCAR"             "clusterData"       
> 
> 
> 
> 
> cleanEx()
> nameEx("generateSampleDataFile")
> ### * generateSampleDataFile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateSampleDataFile
> ### Title: Generate sample data files for profile regression
> ### Aliases: generateSampleDataFile
> ### Keywords: simulation
> 
> ### ** Examples
> 
> # generation of data for clustering
> 
> generateDataList <- clusSummaryBernoulliDiscrete()
> inputs <- generateSampleDataFile(generateDataList)
> 
> 
> 
> 
> cleanEx()
> nameEx("globalParsTrace")
> ### * globalParsTrace
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: globalParsTrace
> ### Title: Plot of the trace of some of the global parameters
> ### Aliases: globalParsTrace
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # generate simulated dataset
> ##D generateDataList <- clusSummaryBernoulliDiscreteSmall()
> ##D inputs <- generateSampleDataFile(generateDataList)
> ##D 
> ##D # run profile regression
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, 
> ##D  nSweeps=10, nBurn=20, data=inputs$inputData, output="output", nFilter=3,
> ##D  covNames=inputs$covNames,nClusInit=15,reportBurnIn=FALSE,
> ##D  fixedEffectsNames = inputs$fixedEffectNames)
> ##D 
> ##D # plot trace for alpha
> ##D globalParsTrace(runInfoObj,parameters="alpha",plotBurnIn=FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("heatDissMat")
> ### * heatDissMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: heatDissMat
> ### Title: Plot the heatmap of the dissimilarity matrix
> ### Aliases: heatDissMat
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # generate simulated dataset
> ##D generateDataList <- clusSummaryBernoulliDiscreteSmall()
> ##D inputs <- generateSampleDataFile(generateDataList)
> ##D 
> ##D # run profile regression
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, 
> ##D  nSweeps=10, nBurn=2000, data=inputs$inputData, output="output", 
> ##D  covNames=inputs$covNames,nClusInit=15)
> ##D 
> ##D # compute dissimilarity matrix     
> ##D dissimObj<-calcDissimilarityMatrix(runInfoObj)
> ##D 
> ##D # plot heatmap
> ##D heatDissMat(dissimObj)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("is.wholenumber")
> ### * is.wholenumber
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.wholenumber
> ### Title: Function to check if a number is a whole number
> ### Aliases: is.wholenumber
> 
> ### ** Examples
> 
> is.wholenumber(4) # TRUE
[1] TRUE
> is.wholenumber(3.4) # FALSE
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("mapforGeneratedData")
> ### * mapforGeneratedData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mapforGeneratedData
> ### Title: Map generated data
> ### Aliases: mapforGeneratedData
> 
> ### ** Examples
> 
> ## Not run: 
> ##D inputs=generateSampleDataFile(clusSummaryPoissonNormalSpatial())
> ##D mapforGeneratedData(inputs$uCAR)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("margModelPosterior")
> ### * margModelPosterior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: margModelPosterior
> ### Title: Marginal Model Posterior
> ### Aliases: margModelPosterior
> ### Keywords: margModelPosterior
> 
> ### ** Examples
> 
> ## Not run: 
> ##D inputs <- generateSampleDataFile(clusSummaryBernoulliDiscrete())
> ##D 
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, 
> ##D          xModel=inputs$xModel, nSweeps=5, 
> ##D          nBurn=10, data=inputs$inputData, output="output", 
> ##D          covNames = inputs$covNames, nClusInit=15,
> ##D          fixedEffectsNames = inputs$fixedEffectNames)
> ##D 
> ##D margModelPost<-margModelPosterior(runInfoObj)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPredictions")
> ### * plotPredictions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPredictions
> ### Title: Plot the conditional density using the predicted scenarios
> ### Aliases: plotPredictions
> ### Keywords: predictions
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # example with Bernoulli outcome and Discrete covariates
> ##D inputs <- generateSampleDataFile(clusSummaryBernoulliDiscrete())
> ##D # prediction profiles
> ##D preds<-data.frame(matrix(c(
> ##D 2, 2, 2, 2, 2,
> ##D 0, 0, NA, 0, 0),ncol=5,byrow=TRUE))
> ##D 
> ##D colnames(preds)<-names(inputs$inputData)[2:(inputs$nCovariates+1)]
> ##D # run profile regression
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, 
> ##D  nSweeps=10000, nBurn=10000, data=inputs$inputData, output="output", 
> ##D  covNames=inputs$covNames,predict=preds,
> ##D  fixedEffectsNames = inputs$fixedEffectNames)        
> ##D dissimObj <- calcDissimilarityMatrix(runInfoObj)
> ##D clusObj <- calcOptimalClustering(dissimObj)
> ##D riskProfileObj <- calcAvgRiskAndProfile(clusObj)
> ##D predictions <- calcPredictions(riskProfileObj,fullSweepPredictions=TRUE,fullSweepLogOR=TRUE)
> ##D 
> ##D plotPredictions(outfile="predictiveDensity.pdf",runInfoObj=runInfoObj,
> ##D  predictions=predictions,logOR=TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotRiskProfile")
> ### * plotRiskProfile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotRiskProfile
> ### Title: Plot the Risk Profiles
> ### Aliases: plotRiskProfile
> ### Keywords: plots postprocessing
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # example for Poisson outcome and Discrete covariates
> ##D inputs <- generateSampleDataFile(clusSummaryPoissonDiscrete())
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, 
> ##D     xModel=inputs$xModel, nSweeps=10, nClusInit=15,
> ##D     nBurn=20, data=inputs$inputData, output="output", 
> ##D     covNames = inputs$covNames, outcomeT = inputs$outcomeT,
> ##D     fixedEffectsNames = inputs$fixedEffectNames)
> ##D 
> ##D dissimObj<-calcDissimilarityMatrix(runInfoObj)
> ##D clusObj<-calcOptimalClustering(dissimObj)
> ##D riskProfileObj<-calcAvgRiskAndProfile(clusObj)
> ##D clusterOrderObj<-plotRiskProfile(riskProfileObj,"summary.png")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("profRegr")
> ### * profRegr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: profRegr
> ### Title: Profile Regression
> ### Aliases: profRegr
> ### Keywords: profileRegression
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # example for Poisson outcome and Discrete covariates
> ##D inputs <- generateSampleDataFile(clusSummaryPoissonDiscrete())
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, 
> ##D     xModel=inputs$xModel, nSweeps=10, nClusInit=20,
> ##D     nBurn=20, data=inputs$inputData, output="output", 
> ##D     covNames = inputs$covNames, outcomeT = inputs$outcomeT,
> ##D     fixedEffectsNames = inputs$fixedEffectNames)
> ##D 
> ##D 
> ##D # example with Bernoulli outcome and Mixed covariates
> ##D inputs <- generateSampleDataFile(clusSummaryBernoulliMixed())
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, 
> ##D     xModel=inputs$xModel, nSweeps=10, nClusInit=15,
> ##D     nBurn=20, data=inputs$inputData, output="output", 
> ##D     discreteCovs = inputs$discreteCovs,
> ##D     continuousCovs = inputs$continuousCovs)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rALD")
> ### * rALD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rALD
> ### Title: Asymmetric Laplace Distribution
> ### Aliases: rALD qALD
> 
> ### ** Examples
> 
> is.wholenumber(4) # TRUE
[1] TRUE
> is.wholenumber(3.4) # FALSE
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("setHyperparams")
> ### * setHyperparams
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setHyperparams
> ### Title: Definition of characteristics of sample datasets for profile
> ###   regression
> ### Aliases: setHyperparams
> ### Keywords: hyperparameters
> 
> ### ** Examples
> 
> ## Not run: 
> ##D hyp <- setHyperparams(shapeAlpha=3,rateAlpha=2,mu0=c(30,13),R0=3.2*diag(2))
> ##D 
> ##D inputs <- generateSampleDataFile(clusSummaryPoissonNormal())
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, 
> ##D     xModel=inputs$xModel, nSweeps=2, nClusInit=15,
> ##D     nBurn=2, data=inputs$inputData, output="output", 
> ##D     covNames = inputs$covNames, outcomeT = inputs$outcomeT,
> ##D     fixedEffectsNames = inputs$fixedEffectNames,
> ##D     hyper=hyp)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("simBenchmark")
> ### * simBenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simBenchmark
> ### Title: Benchmark for simulated examples
> ### Aliases: simBenchmark
> ### Keywords: benchmark simulations testing
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # vector of all test datasets allowed by this benchmarking function
> ##D testDatasets<-c("clusSummaryBernoulliNormal",
> ##D   "clusSummaryBernoulliDiscreteSmall","clusSummaryCategoricalDiscrete",
> ##D   "clusSummaryNormalDiscrete","clusSummaryNormalNormal", 
> ##D   "clusSummaryNormalNormalSpatial","clusSummaryVarSelectBernoulliDiscrete", 
> ##D   "clusSummaryBernoulliMixed")
> ##D 
> ##D # runs profile regression on all datasets and 
> ##D # computes confusion matrix for each one
> ##D for (i in 1:length(testDatasets)){
> ##D   tester<-simBenchmark(testDatasets[i])
> ##D   print(table(tester[,c(1,3)]))
> ##D }
> ##D 
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("summariseVarSelectRho")
> ### * summariseVarSelectRho
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summariseVarSelectRho
> ### Title: summariseVarSelectRho
> ### Aliases: summariseVarSelectRho
> ### Keywords: variableSelection
> 
> ### ** Examples
> 
> ## Not run: 
> ##D inputs <- generateSampleDataFile(clusSummaryVarSelectBernoulliDiscrete())
> ##D 
> ##D runInfoObj<-profRegr(yModel=inputs$yModel, 
> ##D     xModel=inputs$xModel, nSweeps=10, nClusInit=15, 
> ##D     nBurn=20, data=inputs$inputData, output="output", 
> ##D     covNames = inputs$covNames, varSelect="Continuous")
> ##D 
> ##D rho<-summariseVarSelectRho(runInfoObj)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("vec2mat")
> ### * vec2mat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vec2mat
> ### Title: Vector to upper triangular matrix
> ### Aliases: vec2mat
> 
> ### ** Examples
> 
> vec2mat(data=c(1,2,3),nrow=3)
     [,1] [,2] [,3]
[1,]    0    1    2
[2,]    1    0    3
[3,]    2    3    0
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.62 0.144 5.77 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
